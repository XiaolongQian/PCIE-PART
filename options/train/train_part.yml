# general settings
name: part
model_type: PART_Model
scale: 1
num_gpu: 1
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: pal_train
    type: PART_Dataset
    dataroot_gt: /path/to/your/gt/folder
    dataroot_lq: /path/to/your/ab/folder
    # txt_path: /root/autodl-tmp/home/qxl/dataset/CACBench_Data/train/label
    psf_path: /path/to/your/psf.npy
    filename_tmpl: '{}'
    io_backend:
      type: disk

    gt_size: 256
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 8
    batch_size_per_gpu: 8
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: pal_val
    type: PART_Dataset
    dataroot_gt: /path/to/your/gt/folder
    dataroot_lq: /path/to/your/ab/folder
    # txt_path: /root/autodl-tmp/home/qxl/dataset/CACBench_Data/val/label
    psf_path: /path/to/your/psf.npy
    io_backend:
      type: disk

# network structures
network_g:
  type: PART
  upscale: 1
  in_chans: 3
  img_size: 64
  window_size: 8
  img_range: 1.
  depths: [6, 6, 6, 6, 6, 6]
  embed_dim: 180
  num_heads: [6, 6, 6, 6, 6, 6]

  mlp_ratio: 2
  upsampler: 'pixelshuffle'
  resi_connection: '1conv'

# path
path:
  pretrain_network_g:
  strict_load_g: true
  param_key_g: params_ema
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [100000, 160000, 180000, 190000]
    gamma: 0.5

  total_iter: 200000
  warmup_iter: -1  # no warm up


  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

# validation settings
val:
  val_freq: !!float 1e4
  save_img: true
  # grids: true  # ~ represants none, no grid
  # crop_size: 256  # if grid is true, this is the crop size in image patch
  # max_minibatch: 8  # max val batch size, but  limited to the val batchsize, when val bath size is smaller than it, its useless
  pbar: true  # whether to use PABR for validation
  metrics:
    score: # metric name, can be arbitrary
      type: calculate_score
      crop_border: 0
      test_y_channel: false
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false
    lpips: # metric name, can be arbitrary
      type: calculate_lpips
      crop_border: 0
      test_y_channel: false
# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 1e4
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
